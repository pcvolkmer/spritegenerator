/***************************************************************************
 *   Copyright (C) 2011  Paul-Christian Volkmer
 *   paul-christian.volkmer@mni.thm.de
 *
 *   This file is part of SpriteGenerator.
 *
 *   SpriteGenerator is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   SpriteGenerator is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with SpriteGenerator.  If not, see <http://www.gnu.org/licenses/>.
 ***************************************************************************/

#include "previewpage.h"

QByteArray PreviewPage::create ( QList<CssSpriteElementImage> images, QString prefix ) {
    PreviewPage obj ( images, prefix );
    return obj.create();
}

QByteArray PreviewPage::createCssOnly ( QList< CssSpriteElementImage > images, QString prefix ) {
    PreviewPage obj ( images, prefix );
    return obj.generateCss();
}


PreviewPage::PreviewPage ( QList< CssSpriteElementImage > images, QString prefix ) : _images ( images ) {
    this->_outPuffer = new QString();
    this->_prefix = prefix.isEmpty() ? "sprite" : prefix;
}

PreviewPage::~PreviewPage() {
    delete _outPuffer;
}

QByteArray PreviewPage::generateCss () {
    std::auto_ptr<QString> cssPuffer ( new QString() );
    QTextStream out ( cssPuffer.get() );
    foreach ( CssSpriteElementImage elem, this->_images ) {
        out << "." << PreviewPage::styleName ( elem.fileName(), this->_prefix );
        if ( elem.fileName() != this->_images.last().fileName() ) out << ",\n";
    }

    out << " {\n  background-image: url(sprite.png);\n";
    out << "}\n\n";

    foreach ( CssSpriteElementImage elem, this->_images ) {
        out << "/* generated for image: " << elem.fileName() << " */\n";
        out << "." << PreviewPage::styleName ( elem.fileName(), this->_prefix ) << " {\n";
        out << "  background-repeat: no-repeat;\n";
        out << "  background-position: -" << elem.description()->startPosition().x() << "px -";
        out << elem.description()->startPosition().y() << "px;\n";
        out << "  width: " << elem.description()->size().width() << "px;\n";
        out << "  height: " << elem.description()->size().height() << "px;\n";
        out << "}\n\n";
    }
    return out.string()->toUtf8();
}

QByteArray PreviewPage::create() {
    QTextStream out ( this->_outPuffer );
    out << "<!DOCTYPE html>\n";
    out << "<html lang=\"de-DE\">\n<head>\n<meta charset=\"UTF-8\"/>\n<title>Preview</title>\n<style type=\"text/css\">\n";
    out << "body { margin: 24px; background-color: #DDD; font-family: sans-serif; }\n";
    out << "b { margin: 8px; display: block; }\n";
    out << ".sprite { border: 1px solid gray; background-color: #FFF; color: #333; margin: 2px; padding: 8px; ";
    out << "border-radius: 4px; }\n";
    out << ".sprite:hover { background-color: #FFC; ";
    out << "box-shadow: 2px 2px 2px #CCC; }\n";

    out << this->generateCss();

    out << "</style>\n</head>\n";
    out << "<body>\n";
    QString versionText = "SpriteGenerator "
                          + QString ( VERSION_MAJOR )
                          + "." + QString ( VERSION_MINOR )
                          + "." + QString ( VERSION_PATCH );
    out << "<b>" << "This is a preview for a css sprite generated by " << versionText << "</b>\n";
    foreach ( CssSpriteElementImage elem, this->_images ) {
        out << "<div class=\"sprite\"\n>";
        out << "<div class=\"" << PreviewPage::styleName ( elem.fileName(), this->_prefix ) << "\">";
        out << "</div>\n";
        out << "<pre>\n";
        out << "." << PreviewPage::styleName ( elem.fileName(), this->_prefix ) << " {\n";
        out << "  background-image: url(sprite.png);\n";
        out << "  background-repeat: no-repeat;\n";
        out << "  background-position: -" << elem.description()->startPosition().x() << "px -";
        out << elem.description()->startPosition().y() << "px;\n";
        out << "  width: " << elem.description()->size().width() << "px;\n";
        out << "  height: " << elem.description()->size().height() << "px;\n";
        out << "}\n";
        out << "</pre>\n";
        out << "</div>\n";
    }
    out << "</body>\n";
    out << "</html>";

    return out.string()->toUtf8();
}

QString PreviewPage::styleName ( QString fileName, QString prefix ) {
    QRegExp regExp;
    
    regExp.setPatternSyntax ( QRegExp::RegExp2 );
    regExp.setPattern ( "[^A-Za-z0-9_]" );
    return (prefix.isEmpty() ? "sprite_" : prefix + "_")
           + QDir::fromNativeSeparators ( fileName ).split ( '/' ).last().replace ( ".","_" ).remove ( regExp )
           + "_"
           + QString::number ( qChecksum ( fileName.toUtf8().data(), fileName.size() ), 16 );
}
